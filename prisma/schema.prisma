datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  email         String     @unique
  password      String
  role          Role
  referral_code String?    @unique
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  events        Event[]    @relation("EventOrganizer")
  transactions  Transaction[]
  reviews       Review[]
  referralsMade Referral[] @relation("Referrer")
  referralsReceived Referral[] @relation("Referee")
  points        Point[]
}

model Event {
  id             Int       @id @default(autoincrement())
  organizer_id   Int
  name           String
  description    String?
  category       String?
  location       String
  date           DateTime
  time           DateTime
  is_paid        Boolean   @default(false)
  available_seats Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  tickets        Ticket[]
  transactions   Transaction[]
  reviews        Review[]
  promotions     Promotion[]
  organizer      User      @relation("EventOrganizer", fields: [organizer_id], references: [id])
}

model Ticket {
  id              Int       @id @default(autoincrement())
  event_id        Int
  type            String
  price           Int
  available_quantity Int
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  event           Event     @relation(fields: [event_id], references: [id])
  transaction_items TransactionItem[]
}

model Transaction {
  id            Int       @id @default(autoincrement())
  user_id       Int
  event_id      Int
  total_price   Int
  discount      Int       @default(0)
  final_price   Int
  transaction_date DateTime @default(now())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  user          User      @relation(fields: [user_id], references: [id])
  event         Event     @relation(fields: [event_id], references: [id])
  items         TransactionItem[]
}

model TransactionItem {
  id            Int       @id @default(autoincrement())
  transaction_id Int
  ticket_id     Int
  quantity      Int
  price         Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  transaction   Transaction @relation(fields: [transaction_id], references: [id])
  ticket        Ticket    @relation(fields: [ticket_id], references: [id])
}

model Review {
  id            Int       @id @default(autoincrement())
  event_id      Int
  user_id       Int
  rating        Int       @default(1)
  comment       String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  user          User      @relation(fields: [user_id], references: [id])
  event         Event     @relation(fields: [event_id], references: [id])
}

model Referral {
  id            Int       @id @default(autoincrement())
  referrer_id   Int
  referee_id    Int
  points_earned Int
  expiration_date DateTime
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  referrer      User      @relation("Referrer", fields: [referrer_id], references: [id])
  referee       User      @relation("Referee", fields: [referee_id], references: [id])
}

model Point {
  id            Int       @id @default(autoincrement())
  user_id       Int
  points        Int
  expiration_date DateTime
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  user          User      @relation(fields: [user_id], references: [id])
}

model Promotion {
  id            Int       @id @default(autoincrement())
  event_id      Int
  discount_amount Int
  start_date    DateTime
  end_date      DateTime
  max_uses      Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  event         Event     @relation(fields: [event_id], references: [id])
}

enum Role {
  customer
  organizer
  admin
}
